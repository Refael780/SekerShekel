{"ast":null,"code":"import _objectSpread from \"C:\\\\React\\\\SekerShekel\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\React\\\\SekerShekel\\\\client\\\\src\\\\Components\\\\Pages\\\\Survey\\\\FillSurvey.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { loadSurveyToFill, fillSurveyCom } from '../../../action/survey';\nimport Loading from '../../layout/Loading/Loading';\nimport { Form, FormGroup, Label, Input, FormText, Col, Row, Container, Button } from 'reactstrap';\n\nclass FillSurvey extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: '',\n      survey: []\n    };\n\n    this.componentDidMount = async () => {\n      const title = 's7';\n      await this.props.loadSurveyToFill(this.props.match.params.title.toString());\n      console.log(this.props.match.params);\n      const surveyQuts = this.props.survey.map((el, index) => {\n        return {\n          qut: {\n            qust: el.qust,\n            isChoosenAnswer: el.isChoosenAnswer,\n            index: index,\n            answers: [...el.answers]\n          }\n        };\n      });\n      console.log(surveyQuts);\n      this.setState({\n        title: this.props.match.params.title.toString(),\n        newSurvey: [...this.props.survey],\n        survey: [...surveyQuts]\n      });\n      const ww = this.props.survey.map(element => {\n        return element.isChoosenAnswer ? element.answers.map(ans => {\n          return ans.answer;\n        }) : null;\n      });\n      console.log(ww);\n    };\n\n    this.onChengeHandler = e => {\n      let index = this.state.survey.findIndex(x => x.qut.qust == e.target.name);\n      console.log(this.state.survey);\n      console.log(e.target.name);\n      let theChoosenIndex = this.state.survey[index].qut.answers.findIndex(x => x.answer === e.target.value);\n      this.setState(_objectSpread({}, this.state.survey[index].qut.answers.forEach(x => x.choosen = false)));\n      this.setState(_objectSpread({}, this.state.survey[index].qut.answers[theChoosenIndex].choosen = true));\n      console.log(this.state.survey[index].qut.answers);\n      console.log(this.state.survey[index].qut.answers[theChoosenIndex]);\n      console.log(this.state.survey);\n    };\n\n    this.onChengeTextHandler = e => {\n      let name = e.target.name;\n      let index = this.state.survey.findIndex(x => x.qut.qust == name);\n      this.setState(_objectSpread({}, this.state.survey[index].qut.answers[0].answer = e.target.value));\n    };\n\n    this.SubmitTheSurvey = e => {\n      e.preventDefault();\n      this.props.fillSurveyCom(this.props.match.params.title.toString(), this.state.survey);\n    };\n  }\n\n  render() {\n    const s = this.props.survey;\n    const customForm = this.props.loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }) : React.createElement(Fragment, {\n      dir: \"rtl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.state.title), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.props.isLoading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }) : null, this.state.survey.map(element => {\n      return element.qut.isChoosenAnswer ? React.createElement(FormGroup, {\n        dir: \"rtl\",\n        style: {\n          height: '100%'\n        },\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, `  ${element.qut.qust}`), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, element.qut.answers.map(ans => {\n        return React.createElement(Container, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          style: {\n            width: '20rem',\n            marginLeft: '0.3rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(Input, {\n          style: {\n            width: '1rem'\n          },\n          type: \"radio\",\n          value: ans.answer,\n          name: element.qut.qust,\n          onChange: e => this.onChengeHandler(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }), '   ', `ANSWER: ${ans.answer}`), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }))));\n      }))) : React.createElement(FormGroup, {\n        style: {\n          height: '100%'\n        },\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, `  ${element.qut.qust}`), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, element.qut.answers.map(ans => {\n        return React.createElement(Container, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          style: {\n            width: '20rem',\n            marginLeft: '0.3rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(Input, {\n          style: {\n            width: '14rem',\n            marginTop: '1rem'\n          },\n          type: \"text\",\n          name: element.qut.qust,\n          value: ans.answer,\n          onChange: e => this.onChengeTextHandler(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }), '   ', `ANSWER: ${ans.answer}`), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }))));\n      })));\n    }), React.createElement(Button, {\n      onClick: e => this.SubmitTheSurvey(e),\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"\\u05E9\\u05DC\\u05D7\"), ' '));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, this.props.loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }) : customForm);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  survey: state.survey.survey,\n  isLoading: state.survey.loading\n});\n\nexport default connect(mapStateToProps, {\n  loadSurveyToFill,\n  fillSurveyCom\n})(FillSurvey);","map":{"version":3,"sources":["C:/React/SekerShekel/client/src/Components/Pages/Survey/FillSurvey.js"],"names":["React","Component","Fragment","connect","loadSurveyToFill","fillSurveyCom","Loading","Form","FormGroup","Label","Input","FormText","Col","Row","Container","Button","FillSurvey","state","title","survey","componentDidMount","props","match","params","toString","console","log","surveyQuts","map","el","index","qut","qust","isChoosenAnswer","answers","setState","newSurvey","ww","element","ans","answer","onChengeHandler","e","findIndex","x","target","name","theChoosenIndex","value","forEach","choosen","onChengeTextHandler","SubmitTheSurvey","preventDefault","render","s","customForm","loading","isLoading","height","width","marginLeft","marginTop","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadSurveyToFill, fillSurveyCom } from '../../../action/survey';\r\nimport Loading from '../../layout/Loading/Loading';\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormText,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Button\r\n} from 'reactstrap';\r\n\r\nclass FillSurvey extends Component {\r\n  state = {\r\n    title: '',\r\n    survey: []\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    const title = 's7';\r\n\r\n    await this.props.loadSurveyToFill(this.props.match.params.title.toString());\r\n    console.log(this.props.match.params);\r\n\r\n    const surveyQuts = this.props.survey.map((el, index) => {\r\n      return {\r\n        qut: {\r\n          qust: el.qust,\r\n\r\n          isChoosenAnswer: el.isChoosenAnswer,\r\n          index: index,\r\n          answers: [...el.answers]\r\n        }\r\n      };\r\n    });\r\n\r\n    console.log(surveyQuts);\r\n\r\n    this.setState({\r\n      title: this.props.match.params.title.toString(),\r\n      newSurvey: [...this.props.survey],\r\n      survey: [...surveyQuts]\r\n    });\r\n\r\n    const ww = this.props.survey.map(element => {\r\n      return element.isChoosenAnswer\r\n        ? element.answers.map(ans => {\r\n            return ans.answer;\r\n          })\r\n        : null;\r\n    });\r\n    console.log(ww);\r\n  };\r\n  onChengeHandler = e => {\r\n    let index = this.state.survey.findIndex(x => x.qut.qust == e.target.name);\r\n    console.log(this.state.survey);\r\n    console.log(e.target.name);\r\n\r\n    let theChoosenIndex = this.state.survey[index].qut.answers.findIndex(\r\n      x => x.answer === e.target.value\r\n    );\r\n    this.setState({\r\n      ...this.state.survey[index].qut.answers.forEach(x => (x.choosen = false))\r\n    });\r\n\r\n    this.setState({\r\n      ...(this.state.survey[index].qut.answers[theChoosenIndex].choosen = true)\r\n    });\r\n    console.log(this.state.survey[index].qut.answers);\r\n    console.log(this.state.survey[index].qut.answers[theChoosenIndex]);\r\n    console.log(this.state.survey);\r\n  };\r\n\r\n  onChengeTextHandler = e => {\r\n    let name = e.target.name;\r\n\r\n    let index = this.state.survey.findIndex(x => x.qut.qust == name);\r\n\r\n    this.setState({\r\n      ...(this.state.survey[index].qut.answers[0].answer = e.target.value)\r\n    });\r\n  };\r\n\r\n  SubmitTheSurvey = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.fillSurveyCom(\r\n      this.props.match.params.title.toString(),\r\n      this.state.survey\r\n    );\r\n  };\r\n  render() {\r\n    const s = this.props.survey;\r\n    const customForm = this.props.loading ? (\r\n      <Loading></Loading>\r\n    ) : (\r\n      <Fragment dir='rtl'>\r\n        <h1>{this.state.title}</h1>\r\n        <Form>\r\n          {this.props.isLoading ? <Loading></Loading> : null}\r\n          {this.state.survey.map(element => {\r\n            return element.qut.isChoosenAnswer ? (\r\n              <FormGroup dir='rtl' style={{ height: '100%' }} tag='fieldset'>\r\n                <legend>{`  ${element.qut.qust}`}</legend>\r\n                <ul>\r\n                  {element.qut.answers.map(ans => {\r\n                    return (\r\n                      <Container>\r\n                        <li>\r\n                          <FormGroup check>\r\n                            <Label\r\n                              check\r\n                              style={{ width: '20rem', marginLeft: '0.3rem' }}\r\n                            >\r\n                              <Input\r\n                                style={{ width: '1rem' }}\r\n                                type='radio'\r\n                                value={ans.answer}\r\n                                name={element.qut.qust}\r\n                                onChange={e => this.onChengeHandler(e)}\r\n                              />\r\n                              {'   '}\r\n                              {`ANSWER: ${ans.answer}`}\r\n                            </Label>\r\n                            <br />\r\n                          </FormGroup>\r\n                        </li>\r\n                      </Container>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </FormGroup>\r\n            ) : (\r\n              <FormGroup style={{ height: '100%' }} tag='fieldset'>\r\n                <legend>{`  ${element.qut.qust}`}</legend>\r\n                <ul>\r\n                  {element.qut.answers.map(ans => {\r\n                    return (\r\n                      <Container>\r\n                        <li>\r\n                          <FormGroup check>\r\n                            <Label\r\n                              check\r\n                              style={{ width: '20rem', marginLeft: '0.3rem' }}\r\n                            >\r\n                              <Input\r\n                                style={{ width: '14rem', marginTop: '1rem' }}\r\n                                type='text'\r\n                                name={element.qut.qust}\r\n                                value={ans.answer}\r\n                                onChange={e => this.onChengeTextHandler(e)}\r\n                              />\r\n                              {'   '}\r\n                              {`ANSWER: ${ans.answer}`}\r\n                            </Label>\r\n                            <br />\r\n                          </FormGroup>\r\n                        </li>\r\n                      </Container>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </FormGroup>\r\n            );\r\n          })}\r\n          <Button onClick={e => this.SubmitTheSurvey(e)} color='primary'>\r\n            שלח\r\n          </Button>{' '}\r\n        </Form>\r\n      </Fragment>\r\n    );\r\n\r\n    return <div>{this.props.loading ? <Loading></Loading> : customForm}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  survey: state.survey.survey,\r\n  isLoading: state.survey.loading\r\n});\r\n\r\nexport default connect(mapStateToProps, { loadSurveyToFill, fillSurveyCom })(\r\n  FillSurvey\r\n);\r\n"]},"metadata":{},"sourceType":"module"}