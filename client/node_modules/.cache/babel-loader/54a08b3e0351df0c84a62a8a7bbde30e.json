{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\SekerShekel\\\\client\\\\src\\\\Components\\\\Pages\\\\Survey\\\\FillSurvey.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { loadSurveyToFill } from '../../../action/survey';\nimport Loading from '../../layout/Loading/Loading';\nimport { Form, FormGroup, Label, Input, FormText, Col, Row } from 'reactstrap';\nimport { element } from 'prop-types';\nimport '../../../App.css';\n\nclass FillSurvey extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      survey: []\n    };\n\n    this.componentDidMount = async () => {\n      let som = 'MySeker';\n      const title = 'MySeker';\n      console.log(title);\n      await this.props.loadSurveyToFill(title);\n      this.setState({\n        survey: [...this.props.survey]\n      });\n      console.log('=================================');\n      console.log(this.state.survey);\n      const ww = this.props.survey.map(element => {\n        return element.isChoosenAnswer ? element.answers.map(ans => {\n          return ans.answer;\n        }) : null;\n      });\n      console.log(ww);\n    };\n  }\n\n  render() {\n    const s = this.props.survey;\n    const customForm = this.props.loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }) : React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, this.state.survey.map(element => {\n      return element.isChoosenAnswer ? React.createElement(FormGroup, {\n        tag: \"fieldset\",\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        className: \"col-form-label col-sm-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, `  ${element.qust}`), React.createElement(FormGroup, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, element.answers.map(ans => {\n        return React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"radio\",\n          name: ans.answer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }), `ANSWER: ${ans.answer}`));\n      }))) : React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      });\n    }));\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"legend\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Radio Buttons\"), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), \" Option one is this and that\\u2014be sure to include why it's great\")), React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"radio\",\n      name: \"radio1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), \" Option two can be something else and selecting it will deselect option one\")))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  survey: state.survey.survey,\n  isLoading: state.survey.loading\n});\n\nexport default connect(mapStateToProps, {\n  loadSurveyToFill\n})(FillSurvey);","map":{"version":3,"sources":["C:/React/SekerShekel/client/src/Components/Pages/Survey/FillSurvey.js"],"names":["React","Component","Fragment","connect","loadSurveyToFill","Loading","Form","FormGroup","Label","Input","FormText","Col","Row","element","FillSurvey","state","survey","componentDidMount","som","title","console","log","props","setState","ww","map","isChoosenAnswer","answers","ans","answer","render","s","customForm","loading","qust","mapStateToProps","isLoading"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadSurveyToFill } from '../../../action/survey';\r\nimport Loading from '../../layout/Loading/Loading';\r\nimport { Form, FormGroup, Label, Input, FormText, Col, Row } from 'reactstrap';\r\nimport { element } from 'prop-types';\r\nimport '../../../App.css';\r\nclass FillSurvey extends Component {\r\n  state = {\r\n    survey: []\r\n  };\r\n  componentDidMount = async () => {\r\n    let som = 'MySeker';\r\n    const title = 'MySeker';\r\n    console.log(title);\r\n\r\n    await this.props.loadSurveyToFill(title);\r\n    this.setState({\r\n      survey: [...this.props.survey]\r\n    });\r\n    console.log('=================================');\r\n\r\n    console.log(this.state.survey);\r\n    const ww = this.props.survey.map(element => {\r\n      return element.isChoosenAnswer\r\n        ? element.answers.map(ans => {\r\n            return ans.answer;\r\n          })\r\n        : null;\r\n    });\r\n    console.log(ww);\r\n  };\r\n\r\n  render() {\r\n    const s = this.props.survey;\r\n    const customForm = this.props.loading ? (\r\n      <Loading />\r\n    ) : (\r\n      <Form>\r\n        {this.state.survey.map(element => {\r\n          return element.isChoosenAnswer ? (\r\n            <FormGroup tag='fieldset' row>\r\n              <legend className='col-form-label col-sm-2'>{`  ${element.qust}`}</legend>\r\n              <FormGroup check>\r\n                {element.answers.map(ans => {\r\n                  return (\r\n                    <FormGroup>\r\n                      <Label check>\r\n                        <Input type='radio' name={ans.answer} />\r\n                        {`ANSWER: ${ans.answer}`}\r\n                      </Label>\r\n                    </FormGroup>\r\n                  );\r\n                })}\r\n              </FormGroup>\r\n            </FormGroup>\r\n          ) : (\r\n            <Loading></Loading>\r\n          );\r\n        })}\r\n      </Form>\r\n    );\r\n\r\n    return (\r\n      <Fragment>\r\n        <Form>\r\n          <FormGroup>\r\n            <legend>Radio Buttons</legend>\r\n            <FormGroup>\r\n              <Label>\r\n                <Input type='radio' name='radio1' /> Option one is this and\r\n                that—be sure to include why it's great\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check>\r\n              <Label check>\r\n                <Input type='radio' name='radio1' /> Option two can be something\r\n                else and selecting it will deselect option one\r\n              </Label>\r\n            </FormGroup>\r\n          </FormGroup>\r\n        </Form>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  survey: state.survey.survey,\r\n  isLoading: state.survey.loading\r\n});\r\n\r\nexport default connect(mapStateToProps, { loadSurveyToFill })(FillSurvey);\r\n"]},"metadata":{},"sourceType":"module"}