{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\SekerShekel\\\\client\\\\src\\\\Components\\\\Pages\\\\Survey\\\\FillSurvey.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { loadSurveyToFill } from '../../../action/survey';\nimport Loading from '../../layout/Loading/Loading';\nimport { Form, FormGroup, Label, Input, FormText, Col, Row } from 'reactstrap';\n\nclass FillSurvey extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      survey: []\n    };\n\n    this.componentDidMount = async () => {\n      let som = 'MySeker';\n      const title = 'MySeker';\n      console.log(title);\n      await this.props.loadSurveyToFill(title);\n      this.setState({\n        survey: [...this.props.survey]\n      });\n      console.log('=================================');\n      console.log(this.state.survey);\n      const ww = this.props.survey.map(element => {\n        return element.isChoosenAnswer ? element.answers.map(ans => {\n          return ans.answer;\n        }) : null;\n      });\n      console.log(ww);\n    };\n  }\n\n  render() {\n    const s = this.props.survey;\n    const customForm = this.props.loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }) : React.createElement(Form, {\n      dir: \"rtl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.state.survey.map(element => {\n      return element.isChoosenAnswer ? React.createElement(FormGroup, {\n        style: {\n          height: '100%'\n        },\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, `  ${element.qust}`), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, element.answers.map(ans => {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          style: {\n            height: '100%'\n          },\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(Label, {\n          htmlFor: ans.answer,\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"radio\",\n          value: ans.answer,\n          name: ans.answer,\n          checke: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }), '   ', `ANSWER: ${ans.answer}`), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        })));\n      }))) : React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      });\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, customForm);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  survey: state.survey.survey,\n  isLoading: state.survey.loading\n});\n\nexport default connect(mapStateToProps, {\n  loadSurveyToFill\n})(FillSurvey);","map":{"version":3,"sources":["C:/React/SekerShekel/client/src/Components/Pages/Survey/FillSurvey.js"],"names":["React","Component","connect","loadSurveyToFill","Loading","Form","FormGroup","Label","Input","FormText","Col","Row","FillSurvey","state","survey","componentDidMount","som","title","console","log","props","setState","ww","map","element","isChoosenAnswer","answers","ans","answer","render","s","customForm","loading","height","qust","mapStateToProps","isLoading"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadSurveyToFill } from '../../../action/survey';\r\nimport Loading from '../../layout/Loading/Loading';\r\nimport { Form, FormGroup, Label, Input, FormText, Col, Row } from 'reactstrap';\r\n\r\nclass FillSurvey extends Component {\r\n  state = {\r\n    survey: []\r\n  };\r\n  componentDidMount = async () => {\r\n    let som = 'MySeker';\r\n    const title = 'MySeker';\r\n    console.log(title);\r\n\r\n    await this.props.loadSurveyToFill(title);\r\n    this.setState({\r\n      survey: [...this.props.survey]\r\n    });\r\n    console.log('=================================');\r\n\r\n    console.log(this.state.survey);\r\n    const ww = this.props.survey.map(element => {\r\n      return element.isChoosenAnswer\r\n        ? element.answers.map(ans => {\r\n            return ans.answer;\r\n          })\r\n        : null;\r\n    });\r\n    console.log(ww);\r\n  };\r\n\r\n  render() {\r\n    const s = this.props.survey;\r\n    const customForm = this.props.loading ? (\r\n      <Loading />\r\n    ) : (\r\n      <Form dir='rtl'>\r\n        {this.state.survey.map(element => {\r\n          return element.isChoosenAnswer ? (\r\n            <FormGroup style={{ height: '100%' }} tag='fieldset'>\r\n              <legend>{`  ${element.qust}`}</legend>\r\n              <ul>\r\n                {element.answers.map(ans => {\r\n                  return (\r\n                    <li>\r\n                      <FormGroup style={{ height: '100%' }} check>\r\n                        <Label htmlFor={ans.answer} check>\r\n                          <Input\r\n                            type='radio'\r\n                            value={ans.answer}\r\n                            name={ans.answer}\r\n                            checke={false}\r\n                          />\r\n                          {'   '}\r\n                          {`ANSWER: ${ans.answer}`}\r\n                        </Label>\r\n                        <br />\r\n                      </FormGroup>\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </FormGroup>\r\n          ) : (\r\n            <Loading></Loading>\r\n          );\r\n        })}\r\n      </Form>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        {customForm}\r\n\r\n        {/* <Form>{customForm}</Form> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  survey: state.survey.survey,\r\n  isLoading: state.survey.loading\r\n});\r\n\r\nexport default connect(mapStateToProps, { loadSurveyToFill })(FillSurvey);\r\n"]},"metadata":{},"sourceType":"module"}