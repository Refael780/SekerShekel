{"ast":null,"code":"import _objectSpread from \"C:\\\\React\\\\SekerShekel\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\React\\\\SekerShekel\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\React\\\\SekerShekel\\\\client\\\\src\\\\Components\\\\Pages\\\\Survey\\\\FillSurvey.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { loadSurveyToFill, fillSurveyCom } from '../../../action/survey';\nimport Loading from '../../layout/Loading/Loading';\nimport { Form, FormGroup, Label, Input, FormText, Col, Row, Container, Button } from 'reactstrap';\n\nclass FillSurvey extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: '',\n      survey: []\n    };\n\n    this.componentDidMount = async () => {\n      let surveyN = this.state.survey.surveyN;\n      let som = 'MySeker';\n      const title = 'f';\n      await this.props.loadSurveyToFill(title);\n      console.log(this.props.survey);\n      const surveyQuts = this.props.survey.map((el, index) => {\n        console.log(el);\n        return {\n          qut: {\n            qust: el.qust,\n            isChoosenAnswer: el.isChoosenAnswer,\n            index: index,\n            answers: [...el.answers]\n          }\n        };\n      });\n      console.log(surveyQuts);\n      this.setState({\n        title: title,\n        newSurvey: [...this.props.survey],\n        survey: [...surveyQuts]\n      });\n      const ww = this.props.survey.map(element => {\n        return element.isChoosenAnswer ? element.answers.map(ans => {\n          return ans.answer;\n        }) : null;\n      });\n      console.log(ww);\n    };\n\n    this.onChengeHandler = e => {\n      var _e$target$value = _slicedToArray(e.target.value, 1);\n\n      e.target.name = _e$target$value[0];\n      console.log(e.target);\n    };\n\n    this.onChengeTextHandler = e => {\n      let name = e.target.name;\n      console.log(this.state.survey);\n      let index = this.state.survey.findIndex(x => x.qut.qust == name);\n      this.setState(_objectSpread({}, this.state.survey[index].qut.answers[0].answer = e.target.value));\n    };\n\n    this.SubmitTheSurvey = e => {\n      e.preventDefault();\n      console.log('Submit Surviy');\n      this.props.fillSurveyCom('fbd', this.state.survey);\n    };\n  }\n\n  render() {\n    const s = this.props.survey;\n    const customForm = this.props.loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.title), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.props.isLoading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }) : null, this.state.survey.map(element => {\n      return element.qut.isChoosenAnswer ? React.createElement(FormGroup, {\n        style: {\n          height: '100%'\n        },\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, `  ${element.qut.qust}`), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, element.qut.answers.map(ans => {\n        return React.createElement(Container, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          style: {\n            width: '20rem',\n            marginLeft: '0.3rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(Input, {\n          style: {\n            width: '1rem'\n          },\n          type: \"radio\",\n          value: element.qut.qust,\n          name: element.qut.qust,\n          onChange: e => this.onChengeHandler(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }), '   ', `ANSWER: ${ans.answer}`), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }))));\n      }))) : React.createElement(FormGroup, {\n        style: {\n          height: '100%'\n        },\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, `  ${element.qut.qust}`), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, element.qut.answers.map(ans => {\n        return React.createElement(Container, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          style: {\n            width: '20rem',\n            marginLeft: '0.3rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(Input, {\n          style: {\n            width: '14rem',\n            marginTop: '1rem'\n          },\n          type: \"text\",\n          name: element.qut.qust,\n          value: ans.answer,\n          onChange: e => this.onChengeTextHandler(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }), '   ', `ANSWER: ${ans.answer}`), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }))));\n      })));\n    }), React.createElement(Button, {\n      onClick: e => this.SubmitTheSurvey(e),\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"\\u05E9\\u05DC\\u05D7\"), ' '));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.props.loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }) : customForm);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  survey: state.survey.survey,\n  isLoading: state.survey.loading\n});\n\nexport default connect(mapStateToProps, {\n  loadSurveyToFill,\n  fillSurveyCom\n})(FillSurvey);","map":{"version":3,"sources":["C:/React/SekerShekel/client/src/Components/Pages/Survey/FillSurvey.js"],"names":["React","Component","Fragment","connect","loadSurveyToFill","fillSurveyCom","Loading","Form","FormGroup","Label","Input","FormText","Col","Row","Container","Button","FillSurvey","state","title","survey","componentDidMount","surveyN","som","props","console","log","surveyQuts","map","el","index","qut","qust","isChoosenAnswer","answers","setState","newSurvey","ww","element","ans","answer","onChengeHandler","e","target","value","name","onChengeTextHandler","findIndex","x","SubmitTheSurvey","preventDefault","render","s","customForm","loading","isLoading","height","width","marginLeft","marginTop","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadSurveyToFill, fillSurveyCom } from '../../../action/survey';\r\nimport Loading from '../../layout/Loading/Loading';\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormText,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Button\r\n} from 'reactstrap';\r\n\r\nclass FillSurvey extends Component {\r\n  state = {\r\n    title: '',\r\n    survey: []\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    let { surveyN } = this.state.survey;\r\n\r\n    let som = 'MySeker';\r\n    const title = 'f';\r\n\r\n    await this.props.loadSurveyToFill(title);\r\n    console.log(this.props.survey);\r\n\r\n    const surveyQuts = this.props.survey.map((el, index) => {\r\n      console.log(el);\r\n\r\n      return {\r\n        qut: {\r\n          qust: el.qust,\r\n\r\n          isChoosenAnswer: el.isChoosenAnswer,\r\n          index: index,\r\n          answers: [...el.answers]\r\n        }\r\n      };\r\n    });\r\n\r\n    console.log(surveyQuts);\r\n\r\n    this.setState({\r\n      title: title,\r\n      newSurvey: [...this.props.survey],\r\n      survey: [...surveyQuts]\r\n    });\r\n\r\n    const ww = this.props.survey.map(element => {\r\n      return element.isChoosenAnswer\r\n        ? element.answers.map(ans => {\r\n            return ans.answer;\r\n          })\r\n        : null;\r\n    });\r\n    console.log(ww);\r\n  };\r\n  onChengeHandler = e => {\r\n    [e.target.name] = e.target.value;\r\n    console.log(e.target);\r\n  };\r\n  onChengeTextHandler = e => {\r\n    let name = e.target.name;\r\n    console.log(this.state.survey);\r\n\r\n    let index = this.state.survey.findIndex(x => x.qut.qust == name);\r\n\r\n    this.setState({\r\n      ...(this.state.survey[index].qut.answers[0].answer = e.target.value)\r\n    });\r\n  };\r\n\r\n  SubmitTheSurvey = e => {\r\n    e.preventDefault();\r\n    console.log('Submit Surviy');\r\n    this.props.fillSurveyCom('fbd', this.state.survey);\r\n  };\r\n  render() {\r\n    const s = this.props.survey;\r\n    const customForm = this.props.loading ? (\r\n      <Loading></Loading>\r\n    ) : (\r\n      <Fragment>\r\n        <h1>{this.state.title}</h1>\r\n        <Form>\r\n          {this.props.isLoading ? <Loading></Loading> : null}\r\n          {this.state.survey.map(element => {\r\n            return element.qut.isChoosenAnswer ? (\r\n              <FormGroup style={{ height: '100%' }} tag='fieldset'>\r\n                <legend>{`  ${element.qut.qust}`}</legend>\r\n                <ul>\r\n                  {element.qut.answers.map(ans => {\r\n                    return (\r\n                      <Container>\r\n                        <li>\r\n                          <FormGroup check>\r\n                            <Label\r\n                              check\r\n                              style={{ width: '20rem', marginLeft: '0.3rem' }}\r\n                            >\r\n                              <Input\r\n                                style={{ width: '1rem' }}\r\n                                type='radio'\r\n                                value={element.qut.qust}\r\n                                name={element.qut.qust}\r\n                                onChange={e => this.onChengeHandler(e)}\r\n                              />\r\n                              {'   '}\r\n                              {`ANSWER: ${ans.answer}`}\r\n                            </Label>\r\n                            <br />\r\n                          </FormGroup>\r\n                        </li>\r\n                      </Container>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </FormGroup>\r\n            ) : (\r\n              <FormGroup style={{ height: '100%' }} tag='fieldset'>\r\n                <legend>{`  ${element.qut.qust}`}</legend>\r\n                <ul>\r\n                  {element.qut.answers.map(ans => {\r\n                    return (\r\n                      <Container>\r\n                        <li>\r\n                          <FormGroup check>\r\n                            <Label\r\n                              check\r\n                              style={{ width: '20rem', marginLeft: '0.3rem' }}\r\n                            >\r\n                              <Input\r\n                                style={{ width: '14rem', marginTop: '1rem' }}\r\n                                type='text'\r\n                                name={element.qut.qust}\r\n                                value={ans.answer}\r\n                                onChange={e => this.onChengeTextHandler(e)}\r\n                              />\r\n                              {'   '}\r\n                              {`ANSWER: ${ans.answer}`}\r\n                            </Label>\r\n                            <br />\r\n                          </FormGroup>\r\n                        </li>\r\n                      </Container>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </FormGroup>\r\n            );\r\n          })}\r\n          <Button onClick={e => this.SubmitTheSurvey(e)} color='primary'>\r\n            שלח\r\n          </Button>{' '}\r\n        </Form>\r\n      </Fragment>\r\n    );\r\n\r\n    return <div>{this.props.loading ? <Loading></Loading> : customForm}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  survey: state.survey.survey,\r\n  isLoading: state.survey.loading\r\n});\r\n\r\nexport default connect(mapStateToProps, { loadSurveyToFill, fillSurveyCom })(\r\n  FillSurvey\r\n);\r\n"]},"metadata":{},"sourceType":"module"}