{"ast":null,"code":"import _slicedToArray from \"C:\\\\React\\\\SekerShekel\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\React\\\\SekerShekel\\\\client\\\\src\\\\Components\\\\Pages\\\\Survey\\\\FillSurvey.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { loadSurveyToFill } from '../../../action/survey';\nimport Loading from '../../layout/Loading/Loading';\nimport { Form, FormGroup, Label, Input, FormText, Col, Row, Container } from 'reactstrap';\n\nclass FillSurvey extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      survey: []\n    };\n\n    this.componentDidMount = async () => {\n      let som = 'MySeker';\n      const title = 'MM';\n      console.log(title);\n      await this.props.loadSurveyToFill(title);\n      this.setState({\n        survey: [...this.props.survey]\n      });\n      console.log('=================================');\n      console.log(this.state.survey);\n      const ww = this.props.survey.map(element => {\n        return element.isChoosenAnswer ? element.answers.map(ans => {\n          return ans.answer;\n        }) : null;\n      });\n      console.log(ww);\n    };\n\n    this.onChengeHandler = e => {\n      var _e$target$value = _slicedToArray(e.target.value, 1);\n\n      e.target.name = _e$target$value[0];\n      console.log(e.target);\n    };\n  }\n\n  render() {\n    const s = this.props.survey;\n    const customForm = this.props.loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, this.state.survey.title), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.state.survey.map(element => {\n      return element.isChoosenAnswer ? React.createElement(FormGroup, {\n        style: {\n          height: '100%'\n        },\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, `  ${element.qust}`), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, element.answers.map(ans => {\n        return React.createElement(Container, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          style: {\n            width: '20rem',\n            marginLeft: '0.3rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(Input, {\n          style: {\n            width: '1rem'\n          },\n          type: \"radio\",\n          value: ans.answer,\n          name: element.qust,\n          onChange: e => this.onChengeHandler(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }), '   ', `ANSWER: ${ans.answer}`), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }))));\n      }))) : React.createElement(FormGroup, {\n        style: {\n          height: '100%'\n        },\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, `  ${element.qust}`), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, element.answers.map(ans => {\n        return React.createElement(Container, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          style: {\n            width: '20rem',\n            marginLeft: '0.3rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(Input, {\n          style: {\n            width: '14rem',\n            marginTop: '1rem'\n          },\n          type: \"text\",\n          name: ans.answer,\n          onChange: e => this.onChengeHandler(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }), '   ', `ANSWER: ${ans.answer}`), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }))));\n      })));\n    }), React.createElement(\"button\", {\n      className: \"btn-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"SAND\"), \";\"));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, customForm);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  survey: state.survey.survey,\n  isLoading: state.survey.loading\n});\n\nexport default connect(mapStateToProps, {\n  loadSurveyToFill\n})(FillSurvey);","map":{"version":3,"sources":["C:/React/SekerShekel/client/src/Components/Pages/Survey/FillSurvey.js"],"names":["React","Component","Fragment","connect","loadSurveyToFill","Loading","Form","FormGroup","Label","Input","FormText","Col","Row","Container","FillSurvey","state","survey","componentDidMount","som","title","console","log","props","setState","ww","map","element","isChoosenAnswer","answers","ans","answer","onChengeHandler","e","target","value","name","render","s","customForm","loading","height","qust","width","marginLeft","marginTop","mapStateToProps","isLoading"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadSurveyToFill } from '../../../action/survey';\r\nimport Loading from '../../layout/Loading/Loading';\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormText,\r\n  Col,\r\n  Row,\r\n  Container\r\n} from 'reactstrap';\r\n\r\nclass FillSurvey extends Component {\r\n  state = {\r\n    survey: []\r\n  };\r\n  componentDidMount = async () => {\r\n    let som = 'MySeker';\r\n    const title = 'MM';\r\n    console.log(title);\r\n\r\n    await this.props.loadSurveyToFill(title);\r\n    this.setState({\r\n      survey: [...this.props.survey]\r\n    });\r\n    console.log('=================================');\r\n\r\n    console.log(this.state.survey);\r\n    const ww = this.props.survey.map(element => {\r\n      return element.isChoosenAnswer\r\n        ? element.answers.map(ans => {\r\n            return ans.answer;\r\n          })\r\n        : null;\r\n    });\r\n    console.log(ww);\r\n  };\r\n  onChengeHandler = e => {\r\n    [e.target.name] = e.target.value;\r\n    console.log(e.target);\r\n  };\r\n\r\n  render() {\r\n    const s = this.props.survey;\r\n    const customForm = this.props.loading ? (\r\n      <Loading />\r\n    ) : (\r\n      <Fragment>\r\n        <h1>{this.state.survey.title}</h1>\r\n        <Form>\r\n          {this.state.survey.map(element => {\r\n            return element.isChoosenAnswer ? (\r\n              <FormGroup style={{ height: '100%' }} tag='fieldset'>\r\n                <legend>{`  ${element.qust}`}</legend>\r\n                <ul>\r\n                  {element.answers.map(ans => {\r\n                    return (\r\n                      <Container>\r\n                        <li>\r\n                          <FormGroup check>\r\n                            <Label\r\n                              check\r\n                              style={{ width: '20rem', marginLeft: '0.3rem' }}\r\n                            >\r\n                              <Input\r\n                                style={{ width: '1rem' }}\r\n                                type='radio'\r\n                                value={ans.answer}\r\n                                name={element.qust}\r\n                                onChange={e => this.onChengeHandler(e)}\r\n                              />\r\n                              {'   '}\r\n                              {`ANSWER: ${ans.answer}`}\r\n                            </Label>\r\n                            <br />\r\n                          </FormGroup>\r\n                        </li>\r\n                      </Container>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </FormGroup>\r\n            ) : (\r\n              <FormGroup style={{ height: '100%' }} tag='fieldset'>\r\n                <legend>{`  ${element.qust}`}</legend>\r\n                <ul>\r\n                  {element.answers.map(ans => {\r\n                    return (\r\n                      <Container>\r\n                        <li>\r\n                          <FormGroup check>\r\n                            <Label\r\n                              check\r\n                              style={{ width: '20rem', marginLeft: '0.3rem' }}\r\n                            >\r\n                              <Input\r\n                                style={{ width: '14rem', marginTop: '1rem' }}\r\n                                type='text'\r\n                                name={ans.answer}\r\n                                onChange={e => this.onChengeHandler(e)}\r\n                              />\r\n                              {'   '}\r\n                              {`ANSWER: ${ans.answer}`}\r\n                            </Label>\r\n                            <br />\r\n                          </FormGroup>\r\n                        </li>\r\n                      </Container>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </FormGroup>\r\n            );\r\n          })}\r\n          <button className='btn-info'>SAND</button>;\r\n        </Form>\r\n      </Fragment>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        {customForm}\r\n\r\n        {/* <Form>{customForm}</Form> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  survey: state.survey.survey,\r\n  isLoading: state.survey.loading\r\n});\r\n\r\nexport default connect(mapStateToProps, { loadSurveyToFill })(FillSurvey);\r\n"]},"metadata":{},"sourceType":"module"}